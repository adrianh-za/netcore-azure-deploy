name: Build and deploy API to Azure

# Controls when the action will run.
on:
  push:
    branches:
      - main

# Workflow of the pipeline
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    outputs:
      short-sha: ${{ steps.vars.outputs.short-sha }}

    steps:
    - name: Checkout code
      id: github
      uses: actions/checkout@v3

    - name: Setup WebApi .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0.x'

    - name: Configure Azure Container Service
      uses: azure/docker-login@v2
      with:
        login-server: ${{ vars.ACR_REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: SHA of the commit
      id: vars
      run: |
        calculatedSHA=$(git rev-parse --short ${{ github.sha }})
        echo "::set-output name=short-sha::$calculatedSHA"

    - name: Build and push Docker image to Azure Container Service
      env:
        acr-registry: ${{ vars.ACR_REGISTRY }}
        image-tag: ${{ steps.vars.outputs.short_sha }}
      run: |
        docker build -f FormulaOne.Dockerfile -t registry/f1app:$image-tag -t registry/f1app:latest .
        docker push registry/f1app --all-tags

  deploy-container-to-ACS:
    runs-on: ubuntu-latest
    needs: build-and-deploy

    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Build and deploy to Azure Container Service
        uses: azure/container-apps-deploy-action@v1
        env:
          image-tag: ${{ needs.build-and-deploy.outputs.short-sha }}
          acr-server: ${{ vars.ACR_REGISTRY }}
        with:
          registryUrl: ${{ vars.ACR_REGISTRY }}
          imageToDeploy: acrServer/f1app:imageTag
          targetPort: 8080
          ingress: external
          containerAppName: f1appdev
          containerAppEnvironment: f1envdev
          resourceGroup: f1-rg
          environment: |
            ASPNETCORE_ENVIRONMENT=Development ASPNETCORE_URLS=http://*:8080